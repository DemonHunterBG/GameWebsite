// <auto-generated />
using System;
using GameWebsite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameWebsite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207192434_MoreSeeding")]
    partial class MoreSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameWebsite.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GameWebsite.Data.Models.ApplicationUserGame", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("ApplicationUsersGames");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArtworkURL")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Artworks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            ArtworkURL = "/images/artworks/Forest.png",
                            Title = "Forest"
                        },
                        new
                        {
                            Id = 2,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            ArtworkURL = "/images/artworks/Lizard Monster.png",
                            Title = "Lizard Monster"
                        },
                        new
                        {
                            Id = 3,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            ArtworkURL = "/images/artworks/Snel.png",
                            Title = "Snel"
                        },
                        new
                        {
                            Id = 4,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            ArtworkURL = "/images/artworks/Wolf.png",
                            Title = "Wolf"
                        },
                        new
                        {
                            Id = 5,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            ArtworkURL = "/images/artworks/Zoom Rocket.png",
                            Title = "Zoom Rocket"
                        },
                        new
                        {
                            Id = 6,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            ArtworkURL = "/images/artworks/Christmas Tree.png",
                            Title = "Christmas Tree"
                        });
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("GameURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "You are a demon. The last of your kind. Cursed to fight to the bloody end again and again. Humanity on one side and abominations on the other.\r\n\r\nFIGHT ON!!!\r\n\r\n\r\n\r\n\r\nMade for GameDev.tv Game Jam 2024\r\n\r\nTheme: Last Stand\r\n\r\n\r\n\r\nLeave a comment with the wave you reached!\r\n\r\nIf you like this game, consider checking out my other ones!",
                            GameURL = "http://127.0.0.1/DemonicaS/",
                            ImageURL = "http://127.0.0.1/DemonicaS/Icon.png",
                            Name = "DemonicaS"
                        },
                        new
                        {
                            Id = 2,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Travel across a dozen different locations to defeat a multitude of different enemy spacecraft while avoiding their weaponry and upgrading your own ship in this top down shooter!\r\n\r\nThis is my first larger game. I hope you enjoy it!\r\n\r\nSpecial thanks to CORPVS for the music in the game.",
                            GameURL = "http://127.0.0.1/Interstellar Submarine 2.1.0 Webgl/",
                            ImageURL = "http://127.0.0.1/Interstellar Submarine 2.1.0 Webgl/Icon.png",
                            Name = "Interstellar Submarine"
                        },
                        new
                        {
                            Id = 3,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Top down mining game.\r\n\r\n Made for Mini Jame Gam #21\r\n\r\nControls:\r\n\r\nMovement - WASD\r\nMining - Run into blocks\r\nFINAL UPDATE 1.4\r\n\r\n4 New Biomes\r\n10 New Blocks\r\n3 New Upgrades\r\nUI Changes\r\nMusic - Olexy on pixabay",
                            GameURL = "http://127.0.0.1/Loop Miner 1.4/",
                            ImageURL = "http://127.0.0.1/Loop Miner 1.4/Icon.png",
                            Name = "Loop Miner"
                        },
                        new
                        {
                            Id = 4,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Made for Fireside Jam 2024\r\n\r\nBuild and expand your oil business to 3 different locations!\r\n\r\nIncludes:\r\n\r\n3 Different locations\r\n13 Structures to build\r\n16 Challenges to complete\r\nMusic - public domain verion of the 1718-1720 'Winter' by Antonio Vivaldi",
                            GameURL = "http://127.0.0.1/Oil Tycoon Webgl/",
                            ImageURL = "http://127.0.0.1/Oil Tycoon Webgl/Icon.png",
                            Name = "Oil Tycoon"
                        },
                        new
                        {
                            Id = 5,
                            AddedOn = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Controls:\r\n\r\n-Click on flowers to collect them with left mouse button\r\n\r\n-Click on upgade buttons with left mouse button\r\n\r\nCredits:\r\n\r\nMusic - Devonshire Waltz Allegretto Kevin MacLeod (incompetech.com)",
                            GameURL = "http://127.0.0.1/Spring Madness Build/",
                            ImageURL = "http://127.0.0.1/Spring Madness Build/Icon.png",
                            Name = "Spring Madness"
                        });
                });

            modelBuilder.Entity("GameWebsite.Data.Models.GameComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameComments");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreName = "Adventure"
                        },
                        new
                        {
                            Id = 2,
                            GenreName = "Action"
                        },
                        new
                        {
                            Id = 3,
                            GenreName = "Sports"
                        },
                        new
                        {
                            Id = 4,
                            GenreName = "Simulation"
                        },
                        new
                        {
                            Id = 5,
                            GenreName = "Platformer"
                        },
                        new
                        {
                            Id = 6,
                            GenreName = "RPG"
                        },
                        new
                        {
                            Id = 7,
                            GenreName = "First-person Shooter"
                        },
                        new
                        {
                            Id = 8,
                            GenreName = "Action-adventure"
                        },
                        new
                        {
                            Id = 9,
                            GenreName = "Strategy"
                        },
                        new
                        {
                            Id = 10,
                            GenreName = "Real-time Strategy"
                        },
                        new
                        {
                            Id = 11,
                            GenreName = "Strategy"
                        },
                        new
                        {
                            Id = 12,
                            GenreName = "Grand Strategy"
                        },
                        new
                        {
                            Id = 13,
                            GenreName = "Casual"
                        },
                        new
                        {
                            Id = 14,
                            GenreName = "Fighting"
                        },
                        new
                        {
                            Id = 15,
                            GenreName = "MMO"
                        },
                        new
                        {
                            Id = 16,
                            GenreName = "Stealth"
                        },
                        new
                        {
                            Id = 17,
                            GenreName = "Survival"
                        },
                        new
                        {
                            Id = 18,
                            GenreName = "Racing"
                        },
                        new
                        {
                            Id = 19,
                            GenreName = "Horror"
                        },
                        new
                        {
                            Id = 20,
                            GenreName = "Puzzle"
                        });
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameWebsite.Data.Models.ApplicationUserGame", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.Game", "Game")
                        .WithMany("Favorites")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", "User")
                        .WithMany("FavoriteGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.GameComment", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", "User")
                        .WithMany("GameComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.GameGenre", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.Game", "Game")
                        .WithMany("Genres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWebsite.Data.Models.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Post", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.PostComment", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameWebsite.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameWebsite.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteGames");

                    b.Navigation("GameComments");

                    b.Navigation("PostComments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Genre", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameWebsite.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
